"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const firebase_admin_1 = __importDefault(require("firebase-admin"));
const src_1 = require("../../src");
const models_1 = require("../data/models");
const ServerEngine_1 = __importDefault(require("../../src/engine/ServerEngine"));
const repositories_1 = require("../data/repositories");
let dogRepository = null;
let catRepository = null;
let humanRepository = null;
firebase_admin_1.default.initializeApp({
    credential: firebase_admin_1.default.credential.cert(require('../../service-account.json'))
});
(0, src_1.startOrm)(new ServerEngine_1.default(firebase_admin_1.default.app()));
(0, src_1.registerRepositories)([repositories_1.DogRepository, repositories_1.HumanRepository, repositories_1.CatRepository]);
beforeAll(async () => {
    dogRepository = (0, src_1.getRepositoryFor)(models_1.Dog);
    humanRepository = (0, src_1.getRepositoryFor)(models_1.Human);
    catRepository = (0, src_1.getRepositoryFor)(models_1.Cat);
    await firebase_admin_1.default.firestore().collection('humans').doc('1').set({
        name: 'John'
    });
    await firebase_admin_1.default.firestore().collection('humans').doc('2').set({
        name: 'Jim'
    });
    await firebase_admin_1.default.firestore().collection('humans/1/dogs').doc('1').set({
        name: 'Fido',
        bones: [
            { length: 10 },
            { length: 20 },
        ]
    });
    await firebase_admin_1.default.firestore().collection('humans/1/cats').doc('1').set({
        name: 'Leprechaun'
    });
});
afterAll(async () => {
    await firebase_admin_1.default.firestore().collection('humans/1/cats').doc('1').delete();
    await firebase_admin_1.default.firestore().collection('humans/1/dogs').doc('1').delete();
    await firebase_admin_1.default.firestore().collection('humans').doc('1').delete();
    await firebase_admin_1.default.firestore().collection('humans').doc('2').delete();
});
test('loadMany on model by repository', async () => {
    const cat = await catRepository.load("1", { humanId: "1" });
    console.log(cat);
    await cat.loadMany(['human', 'human.dogs']);
    expect(cat.name).toBe("Leprechaun");
    expect(cat.human.name).toBe("John");
    expect(cat.human.dogs[0].id).toBe("1");
    expect(cat.human.dogs[0].name).toBe("Fido");
});
test('load by id on repository', async () => {
    const human = await humanRepository.load("1");
    expect(human.name).toBe('John');
});
test('loadMany by ids on repository', async () => {
    const humans = await humanRepository.loadMany(["1", "2"]);
    expect(humans.length).toBe(2);
    expect(humans[0].name).toBe('John');
    expect(humans[1].name).toBe('Jim');
});
test('loadMany on model by repository', async () => {
    const human = await humanRepository.load("1");
    await human.load('relatives');
    human.relatives;
    expect(human.relatives.length).toBe(1);
    expect(human.relatives[0].name).toBe('Jim');
});
test('load by id with additional route params on repository', async () => {
    const dog = await dogRepository.load("1", { humanId: "1" });
    expect(dog.name).toBe('Fido');
    expect(dog.bones[0].length).toBe(10);
    expect(dog.bones[1].length).toBe(20);
});
test('load subcollection on model with repository', async () => {
    const human = await humanRepository.load("1");
    await human.load("dogs");
    expect(human.dogs.length).toBe(1);
    expect(human.dogs[0].name).toBe("Fido");
});
//# sourceMappingURL=data:application/json;base64,