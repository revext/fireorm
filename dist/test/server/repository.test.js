"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
const firebase_admin_1 = __importDefault(require("firebase-admin"));
const src_1 = require("../../src");
const models_1 = require("../data/models");
const ServerEngine_1 = __importDefault(require("../../src/engine/ServerEngine"));
const repositories_1 = require("../data/repositories");
let dogRepository = null;
let catRepository = null;
let humanRepository = null;
firebase_admin_1.default.initializeApp({
    credential: firebase_admin_1.default.credential.cert(require('../../service-account.json'))
});
(0, src_1.startOrm)(new ServerEngine_1.default(firebase_admin_1.default.app()));
(0, src_1.registerRepositories)([repositories_1.DogRepository, repositories_1.HumanRepository, repositories_1.CatRepository]);
beforeAll(async () => {
    dogRepository = (0, src_1.getRepositoryFor)(models_1.Dog);
    humanRepository = (0, src_1.getRepositoryFor)(models_1.Human);
    catRepository = (0, src_1.getRepositoryFor)(models_1.Cat);
    await firebase_admin_1.default.firestore().collection('humans').doc('1').set({
        name: 'John'
    });
    await firebase_admin_1.default.firestore().collection('humans').doc('2').set({
        name: 'Jim'
    });
    await firebase_admin_1.default.firestore().collection('humans/1/dogs').doc('1').set({
        name: 'Fido',
        bones: [
            { length: 10 },
            { length: 20 },
        ]
    });
    await firebase_admin_1.default.firestore().collection('humans/1/cats').doc('1').set({
        name: 'Leprechaun'
    });
});
afterAll(async () => {
    await firebase_admin_1.default.firestore().collection('humans/1/cats').doc('1').delete();
    await firebase_admin_1.default.firestore().collection('humans/1/dogs').doc('1').delete();
    await firebase_admin_1.default.firestore().collection('humans').doc('1').delete();
    await firebase_admin_1.default.firestore().collection('humans').doc('2').delete();
});
test('loadMany on model by repository', async () => {
    const cat = await catRepository.load("1", { humanId: "1" });
    console.log(cat);
    await cat.loadMany(['human', 'human.dogs']);
    expect(cat.name).toBe("Leprechaun");
    expect(cat.human.name).toBe("John");
    expect(cat.human.dogs[0].id).toBe("1");
    expect(cat.human.dogs[0].name).toBe("Fido");
});
test('load by id on repository', async () => {
    const human = await humanRepository.load("1");
    expect(human.name).toBe('John');
});
test('loadMany by ids on repository', async () => {
    const humans = await humanRepository.loadMany(["1", "2"]);
    expect(humans.length).toBe(2);
    expect(humans[0].name).toBe('John');
    expect(humans[1].name).toBe('Jim');
});
test('loadMany on model by repository', async () => {
    const human = await humanRepository.load("1");
    await human.load('relatives');
    human.relatives;
    expect(human.relatives.length).toBe(1);
    expect(human.relatives[0].name).toBe('Jim');
});
test('load by id with additional route params on repository', async () => {
    const dog = await dogRepository.load("1", { humanId: "1" });
    expect(dog.name).toBe('Fido');
    expect(dog.bones[0].length).toBe(10);
    expect(dog.bones[1].length).toBe(20);
});
test('load subcollection on model with repository', async () => {
    const human = await humanRepository.load("1");
    await human.load("dogs");
    expect(human.dogs.length).toBe(1);
    expect(human.dogs[0].name).toBe("Fido");
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3NpdG9yeS50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vdGVzdC9zZXJ2ZXIvcmVwb3NpdG9yeS50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNEJBQXlCO0FBQ3pCLG9FQUFrQztBQUNsQyxtQ0FBOEU7QUFDOUUsMkNBQWdEO0FBQ2hELGlGQUF3RDtBQUN4RCx1REFBb0Y7QUFHcEYsSUFBSSxhQUFhLEdBQWtCLElBQUksQ0FBQTtBQUN2QyxJQUFJLGFBQWEsR0FBa0IsSUFBSSxDQUFBO0FBQ3ZDLElBQUksZUFBZSxHQUFvQixJQUFJLENBQUE7QUFFM0Msd0JBQUssQ0FBQyxhQUFhLENBQUM7SUFDaEIsVUFBVSxFQUFFLHdCQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsNEJBQTRCLENBQUMsQ0FBQztDQUMzRSxDQUFDLENBQUE7QUFDRixJQUFBLGNBQVEsRUFBQyxJQUFJLHNCQUFZLENBQUMsd0JBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFFdkMsSUFBQSwwQkFBb0IsRUFBQyxDQUFDLDRCQUFhLEVBQUUsOEJBQWUsRUFBRSw0QkFBYSxDQUFDLENBQUMsQ0FBQTtBQUVyRSxTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFDakIsYUFBYSxHQUFHLElBQUEsc0JBQWdCLEVBQUMsWUFBRyxDQUFrQixDQUFBO0lBQ3RELGVBQWUsR0FBRyxJQUFBLHNCQUFnQixFQUFDLGNBQUssQ0FBb0IsQ0FBQTtJQUM1RCxhQUFhLEdBQUcsSUFBQSxzQkFBZ0IsRUFBQyxZQUFHLENBQWtCLENBQUE7SUFFdEQsTUFBTSx3QkFBSyxDQUFDLFNBQVMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDO1FBQ3RELElBQUksRUFBRSxNQUFNO0tBQ2YsQ0FBQyxDQUFBO0lBQ0YsTUFBTSx3QkFBSyxDQUFDLFNBQVMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDO1FBQ3RELElBQUksRUFBRSxLQUFLO0tBQ2QsQ0FBQyxDQUFBO0lBQ0YsTUFBTSx3QkFBSyxDQUFDLFNBQVMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDO1FBQzdELElBQUksRUFBRSxNQUFNO1FBQ1osS0FBSyxFQUFFO1lBQ0gsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFO1lBQ2QsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFO1NBQ2pCO0tBQ0osQ0FBQyxDQUFBO0lBQ0YsTUFBTSx3QkFBSyxDQUFDLFNBQVMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDO1FBQzdELElBQUksRUFBRSxZQUFZO0tBQ3JCLENBQUMsQ0FBQTtBQUNOLENBQUMsQ0FBQyxDQUFDO0FBRUgsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFO0lBQ2hCLE1BQU0sd0JBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFBO0lBQ3JFLE1BQU0sd0JBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFBO0lBQ3JFLE1BQU0sd0JBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFBO0lBQzlELE1BQU0sd0JBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxD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QUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUNwQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7QUFDeEMsQ0FBQyxDQUFDLENBQUE7QUFFRixJQUFJLENBQUMsNkNBQTZDLEVBQUUsS0FBSyxJQUFJLEVBQUU7SUFDM0QsTUFBTSxLQUFLLEdBQUcsTUFBTSxlQUFlLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBRTdDLE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN4QixNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDakMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQzNDLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdyZWZsZWN0LW1ldGFkYXRhJ1xyXG5pbXBvcnQgYWRtaW4gZnJvbSAnZmlyZWJhc2UtYWRtaW4nXHJcbmltcG9ydCB7ICBzdGFydE9ybSwgIGdldFJlcG9zaXRvcnlGb3IsIHJlZ2lzdGVyUmVwb3NpdG9yaWVzIH0gZnJvbSBcIi4uLy4uL3NyY1wiXHJcbmltcG9ydCB7IEh1bWFuLCBEb2csIENhdCB9IGZyb20gXCIuLi9kYXRhL21vZGVsc1wiXHJcbmltcG9ydCBTZXJ2ZXJFbmdpbmUgZnJvbSAnLi4vLi4vc3JjL2VuZ2luZS9TZXJ2ZXJFbmdpbmUnXHJcbmltcG9ydCB7IERvZ1JlcG9zaXRvcnksIEh1bWFuUmVwb3NpdG9yeSwgQ2F0UmVwb3NpdG9yeSB9IGZyb20gJy4uL2RhdGEvcmVwb3NpdG9yaWVzJ1xyXG5cclxuXHJcbmxldCBkb2dSZXBvc2l0b3J5OiBEb2dSZXBvc2l0b3J5ID0gbnVsbFxyXG5sZXQgY2F0UmVwb3NpdG9yeTogQ2F0UmVwb3NpdG9yeSA9IG51bGxcclxubGV0IGh1bWFuUmVwb3NpdG9yeTogSHVtYW5SZXBvc2l0b3J5ID0gbnVsbFxyXG5cclxuYWRtaW4uaW5pdGlhbGl6ZUFwcCh7XHJcbiAgICBjcmVkZW50aWFsOiBhZG1pbi5jcmVkZW50aWFsLmNlcnQocmVxdWlyZSgnLi4vLi4vc2VydmljZS1hY2NvdW50Lmpzb24nKSlcclxufSlcclxuc3RhcnRPcm0obmV3IFNlcnZlckVuZ2luZShhZG1pbi5hcHAoKSkpXHJcblxyXG5yZWdpc3RlclJlcG9zaXRvcmllcyhbRG9nUmVwb3NpdG9yeSwgSHVtYW5SZXBvc2l0b3J5LCBDYXRSZXBvc2l0b3J5XSlcclxuXHJcbmJlZm9yZUFsbChhc3luYyAoKSA9PiB7XHJcbiAgICBkb2dSZXBvc2l0b3J5ID0gZ2V0UmVwb3NpdG9yeUZvcihEb2cpIGFzIERvZ1JlcG9zaXRvcnlcclxuICAgIGh1bWFuUmVwb3NpdG9yeSA9IGdldFJlcG9zaXRvcnlGb3IoSHVtYW4pIGFzIEh1bWFuUmVwb3NpdG9yeVxyXG4gICAgY2F0UmVwb3NpdG9yeSA9IGdldFJlcG9zaXRvcnlGb3IoQ2F0KSBhcyBDYXRSZXBvc2l0b3J5XHJcblxyXG4gICAgYXdhaXQgYWRtaW4uZmlyZXN0b3JlKCkuY29sbGVjdGlvbignaHVtYW5zJykuZG9jKCcxJykuc2V0KHtcclxuICAgICAgICBuYW1lOiAnSm9obidcclxuICAgIH0pXHJcbiAgICBhd2FpdCBhZG1pbi5maXJlc3RvcmUoKS5jb2xsZWN0aW9uKCdodW1hbnMnKS5kb2MoJzInKS5zZXQoe1xyXG4gICAgICAgIG5hbWU6ICdKaW0nXHJcbiAgICB9KVxyXG4gICAgYXdhaXQgYWRtaW4uZmlyZXN0b3JlKCkuY29sbGVjdGlvbignaHVtYW5zLzEvZG9ncycpLmRvYygnMScpLnNldCh7XHJcbiAgICAgICAgbmFtZTogJ0ZpZG8nLFx0XHJcbiAgICAgICAgYm9uZXM6IFtcclxuICAgICAgICAgICAgeyBsZW5ndGg6IDEwIH0sXHJcbiAgICAgICAgICAgIHsgbGVuZ3RoOiAyMCB9LFxyXG4gICAgICAgIF1cclxuICAgIH0pXHJcbiAgICBhd2FpdCBhZG1pbi5maXJlc3RvcmUoKS5jb2xsZWN0aW9uKCdodW1hbnMvMS9jYXRzJykuZG9jKCcxJykuc2V0KHtcclxuICAgICAgICBuYW1lOiAnTGVwcmVjaGF1bidcclxuICAgIH0pXHJcbn0pO1xyXG5cclxuYWZ0ZXJBbGwoYXN5bmMgKCkgPT4ge1xyXG4gICAgYXdhaXQgYWRtaW4uZmlyZXN0b3JlKCkuY29sbGVjdGlvbignaHVtYW5zLzEvY2F0cycpLmRvYygnMScpLmRlbGV0ZSgpXHJcbiAgICBhd2FpdCBhZG1pbi5maXJlc3RvcmUoKS5jb2xsZWN0aW9uKCdodW1hbnMvMS9kb2dzJykuZG9jKCcxJykuZGVsZXRlKClcclxuICAgIGF3YWl0IGFkbWluLmZpcmVzdG9yZSgpLmNvbGxlY3Rpb24oJ2h1bWFucycpLmRvYygnMScpLmRlbGV0ZSgpXHJcbiAgICBhd2FpdCBhZG1pbi5maXJlc3RvcmUoKS5jb2xsZWN0aW9uKCdodW1hbnMnKS5kb2MoJzInKS5kZWxldGUoKVxyXG59KTtcclxuXHJcbnRlc3QoJ2xvYWRNYW55IG9uIG1vZGVsIGJ5IHJlcG9zaXRvcnknLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBjYXQgPSBhd2FpdCBjYXRSZXBvc2l0b3J5LmxvYWQoXCIxXCIsIHsgaHVtYW5JZDogXCIxXCJ9KVxyXG4gICAgY29uc29sZS5sb2coY2F0KVxyXG4gICAgYXdhaXQgY2F0LmxvYWRNYW55KFsnaHVtYW4nLCAnaHVtYW4uZG9ncyddKVxyXG5cclxuICAgIGV4cGVjdChjYXQubmFtZSkudG9CZShcIkxlcHJlY2hhdW5cIilcclxuICAgIGV4cGVjdChjYXQuaHVtYW4ubmFtZSkudG9CZShcIkpvaG5cIilcclxuICAgIGV4cGVjdChjYXQuaHVtYW4uZG9nc1swXS5pZCkudG9CZShcIjFcIilcclxuICAgIGV4cGVjdChjYXQuaHVtYW4uZG9nc1swXS5uYW1lKS50b0JlKFwiRmlkb1wiKVxyXG59KVxyXG5cclxudGVzdCgnbG9hZCBieSBpZCBvbiByZXBvc2l0b3J5JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgaHVtYW4gPSBhd2FpdCBodW1hblJlcG9zaXRvcnkubG9hZChcIjFcIilcclxuXHJcbiAgICBleHBlY3QoaHVtYW4ubmFtZSkudG9CZSgnSm9obicpXHJcbn0pXHJcblxyXG50ZXN0KCdsb2FkTWFueSBieSBpZHMgb24gcmVwb3NpdG9yeScsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IGh1bWFucyA9IGF3YWl0IGh1bWFuUmVwb3NpdG9yeS5sb2FkTWFueShbXCIxXCIsIFwiMlwiXSlcclxuXHJcbiAgICBleHBlY3QoaHVtYW5zLmxlbmd0aCkudG9CZSgyKVxyXG4gICAgZXhwZWN0KGh1bWFuc1swXS5uYW1lKS50b0JlKCdKb2huJylcclxuICAgIGV4cGVjdChodW1hbnNbMV0ubmFtZSkudG9CZSgnSmltJylcclxufSlcclxuXHJcbnRlc3QoJ2xvYWRNYW55IG9uIG1vZGVsIGJ5IHJlcG9zaXRvcnknLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBodW1hbiA9IGF3YWl0IGh1bWFuUmVwb3NpdG9yeS5sb2FkKFwiMVwiKVxyXG4gICAgYXdhaXQgaHVtYW4ubG9hZCgncmVsYXRpdmVzJylcclxuICAgIGh1bWFuLnJlbGF0aXZlc1xyXG5cclxuICAgIGV4cGVjdChodW1hbi5yZWxhdGl2ZXMubGVuZ3RoKS50b0JlKDEpXHJcbiAgICBleHBlY3QoaHVtYW4ucmVsYXRpdmVzWzBdLm5hbWUpLnRvQmUoJ0ppbScpXHJcbn0pXHJcblxyXG50ZXN0KCdsb2FkIGJ5IGlkIHdpdGggYWRkaXRpb25hbCByb3V0ZSBwYXJhbXMgb24gcmVwb3NpdG9yeScsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IGRvZyA9IGF3YWl0IGRvZ1JlcG9zaXRvcnkubG9hZChcIjFcIiwgeyBodW1hbklkOiBcIjFcIiB9KVxyXG5cclxuICAgIGV4cGVjdChkb2cubmFtZSkudG9CZSgnRmlkbycpXHJcbiAgICBleHBlY3QoZG9nLmJvbmVzWzBdLmxlbmd0aCkudG9CZSgxMClcclxuICAgIGV4cGVjdChkb2cuYm9uZXNbMV0ubGVuZ3RoKS50b0JlKDIwKVxyXG59KVxyXG5cclxudGVzdCgnbG9hZCBzdWJjb2xsZWN0aW9uIG9uIG1vZGVsIHdpdGggcmVwb3NpdG9yeScsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IGh1bWFuID0gYXdhaXQgaHVtYW5SZXBvc2l0b3J5LmxvYWQoXCIxXCIpXHJcblxyXG4gICAgYXdhaXQgaHVtYW4ubG9hZChcImRvZ3NcIilcclxuICAgIGV4cGVjdChodW1hbi5kb2dzLmxlbmd0aCkudG9CZSgxKVxyXG4gICAgZXhwZWN0KGh1bWFuLmRvZ3NbMF0ubmFtZSkudG9CZShcIkZpZG9cIilcclxufSkiXX0=