"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const firebase_admin_1 = __importDefault(require("firebase-admin"));
const src_1 = require("../../src");
const ServerEngine_1 = __importDefault(require("../../src/engine/ServerEngine"));
const models_1 = require("../data/models");
firebase_admin_1.default.initializeApp({
    credential: firebase_admin_1.default.credential.cert(require('../../service-account.json'))
});
(0, src_1.startOrm)(new ServerEngine_1.default(firebase_admin_1.default.app()));
beforeAll(async () => {
    const snapshot = await firebase_admin_1.default.firestore().collection('humans').get();
    snapshot.forEach(async (doc) => {
        await doc.ref.delete();
    });
    await firebase_admin_1.default.firestore().collection('humans').doc('1').set({
        name: 'John'
    });
    await firebase_admin_1.default.firestore().collection('humans').doc('2').set({
        name: 'Jim'
    });
});
test('save on engine, create and save model', async () => {
    const human = new models_1.Human();
    human.name = 'John';
    const savedHuman = await (0, src_1.useEngine)().save(human);
    expect(savedHuman.name).toBe('John');
    expect(savedHuman.createdAt.valueOf()).toBe(human.createdAt.valueOf());
});
test('saveMany on engine, create and save model', async () => {
    const human1 = new models_1.Human();
    human1.name = 'John';
    const human2 = new models_1.Human();
    human2.name = 'Jim';
    const savedHumans = await (0, src_1.useEngine)().saveMany([human1, human2]);
    const docs = [];
    savedHumans.forEach(human => {
        docs.push(firebase_admin_1.default.firestore().collection('humans').doc(human.id));
    });
    const snapshots = await firebase_admin_1.default.firestore().getAll(...docs);
    expect(snapshots[0].data().name).toBe('John');
    expect(snapshots[1].data().name).toBe('Jim');
});
test('update on engine', async () => {
    await (0, src_1.useEngine)().update(src_1.Blueprint.createBlueprint(models_1.Human), "1", { name: "Test" });
    const doc = await firebase_admin_1.default.firestore().collection('humans').doc("1").get();
    expect(doc.data().name).toBe('Test');
});
test('updateMany on engine', async () => {
    const ids = ["1", "2"];
    await (0, src_1.useEngine)().updateMany(src_1.Blueprint.createBlueprint(models_1.Human), ids, { name: "Test" });
    const docs = [];
    ids.forEach(id => {
        docs.push(firebase_admin_1.default.firestore().collection('humans').doc(id));
    });
    const snapshot = await firebase_admin_1.default.firestore().getAll(...docs);
    expect(snapshot[0].data().name).toBe('Test');
    expect(snapshot[1].data().name).toBe('Test');
});
test('load on engine', async () => {
    const loadedHuman = await (0, src_1.useEngine)().load(src_1.Blueprint.createBlueprint(models_1.Human), "1");
    expect(loadedHuman.name).toBe('Test');
});
test('loadMany on engine', async () => {
    const humans = await (0, src_1.useEngine)().loadMany(src_1.Blueprint.createBlueprint(models_1.Human), ["1", "2"]);
    expect(humans[0].name).toBe('Test');
    expect(humans[1].name).toBe('Test');
});
test('loadCollection on engine', async () => {
    const humans = await (0, src_1.useEngine)().loadCollection(src_1.Blueprint.createBlueprint(models_1.Human));
    expect(humans.length).toBe(5);
    expect(humans[0].id).toBe("1");
    expect(humans[1].id).toBe("2");
});
//TODO batch and transaction tests
// test('loadMany by ids on repository', async () => {
//     const humans = await humanRepository.loadMany(["1", "2"])
//     expect(humans.length).toBe(2)
//     expect(humans[0].name).toBe('John')
//     expect(humans[1].name).toBe('Jim')
// })
// test('loadMany on model by repository', async () => {
//     const human = await humanRepository.load("1")
//     await human.load('relatives')
//     human.relatives
//     expect(human.relatives.length).toBe(1)
//     expect(human.relatives[0].name).toBe('Jim')
// })
// test('load by id with additional route params on repository', async () => {
//     const dog = await dogRepository.load("1", { humanId: "1" })
//     expect(dog.name).toBe('Fido')
//     expect(dog.bones[0].length).toBe(10)
//     expect(dog.bones[1].length).toBe(20)
// })
// test('load subcollection on model with repository', async () => {
//     const human = await humanRepository.load("1")
//     await human.load("dogs")
//     expect(human.dogs.length).toBe(1)
//     expect(human.dogs[0].name).toBe("Fido")
// })
//# sourceMappingURL=data:application/json;base64,