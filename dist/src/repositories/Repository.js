"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Repository {
    constructor(engine) {
        //TODO cache the entities into localstorage in browser
        //and into a file on server
        //TODO on clientside refresh the content when refresh from listeners
        this.cachedModels = {};
        this.cachedSubCollections = {};
        this.engine = engine;
    }
    cacheModels(models) {
        models.forEach(model => {
            this.cachedModels[model.id] = model;
        });
    }
    cacheSubCollection(route, models) {
        this.cachedSubCollections[route] = models;
    }
    findCachedModel(id) {
        return this.cachedModels[id];
    }
    async updateMany(ids, data, routeParams = {}) {
        try {
            const blueprint = this.getModelsBlueprint(routeParams);
            return await this.engine.updateMany(blueprint, ids, data);
        }
        catch (error) {
            throw error;
        }
    }
    async update(id, data, routeParams = {}) {
        try {
            const blueprint = this.getModelsBlueprint(routeParams);
            return await this.engine.update(blueprint, id, data);
        }
        catch (error) {
            throw error;
        }
    }
    async saveMany(models) {
        try {
            await Promise.all(models.map(model => model.validate()));
            return this.engine.saveMany(models);
        }
        catch (error) {
            throw error;
        }
    }
    async save(model) {
        try {
            await model.validate();
            return this.engine.save(model);
        }
        catch (error) {
            throw error;
        }
    }
    async query(queryParams, routeParams = {}) {
        const blueprint = this.getModelsBlueprint(routeParams);
        return this.engine.query(blueprint, queryParams);
    }
    async queryAsGroup(queryParams) {
        const blueprint = this.getModelsBlueprint();
        return this.engine.queryAsGroup(blueprint, queryParams);
    }
    async load(id, routeParams = {}, forceRefresh = false) {
        //if we have the model in cache, return it
        if (!forceRefresh) {
            const cachedModel = this.findCachedModel(id);
            if (cachedModel) {
                return cachedModel;
            }
        }
        //otherwise create a blueprint and load the model
        let blueprint = this.getModelsBlueprint(routeParams);
        const model = await this.engine.load(blueprint, id);
        // and finally cache the model
        if (model)
            this.cacheModels([model]);
        return model !== null && model !== void 0 ? model : null;
    }
    async loadMany(ids, routeParams = {}, forceRefresh = true) {
        if (!ids.length) {
            return [];
        }
        //get a model blueprint for the loading
        let blueprint = this.getModelsBlueprint(routeParams);
        const loadedModels = {};
        let toBeLoaded = [];
        //check if we have all the models in cache, if not, then add the id to the toBeLoaded array
        if (!forceRefresh) {
            ids.forEach(id => {
                let cachedModel = this.findCachedModel(id);
                if (cachedModel) {
                    loadedModels[id] = cachedModel;
                }
                else {
                    toBeLoaded.push(id);
                }
            });
        }
        else {
            toBeLoaded = ids;
        }
        //load the toBeLoaded models and put them into the loadedModels object
        const models = await this.engine.loadMany(blueprint, toBeLoaded);
        models.forEach(model => { if (model) {
            loadedModels[model.id] = model;
        } });
        //map the loadedModels into an array
        const returnArray = ids.map(id => loadedModels[id]);
        //cache the loaded models
        this.cacheModels(returnArray);
        //return the array
        return returnArray;
    }
    snapshotListener(name, id, routeParams = {}, onRecieve) {
        this.engine.snapshotListener(name, this.getModelsBlueprint(routeParams), id, onRecieve);
    }
    snapshotListenerForModel(name, model, onRecieve) {
        this.engine.snapshotListener(name, model.getBlueprint(), model.id, onRecieve);
    }
    snapshotListenerMany(name, queryParams, routeParams = {}, onRecieve) {
        this.engine.snapshotListenerMany(name, this.getModelsBlueprint(routeParams), queryParams, onRecieve);
    }
    unsubscribe(name) {
        this.engine.unsubscribeListener(name);
    }
    hasListener(name) {
        return this.engine.hasListener(name);
    }
    async delete(id, routeParams = {}) {
        const blueprint = this.getModelsBlueprint(routeParams);
        return await this.engine.delete(blueprint, id);
    }
    async deleteModel(model) {
        return await this.engine.delete(model.getBlueprint(), model.id);
    }
    async deleteMany(ids, routeParams = {}) {
        const blueprint = this.getModelsBlueprint(routeParams);
        return await this.engine.deleteMany(blueprint, ids);
    }
    getModelsBlueprint(routeParams = {}) {
        return this.getModel().fromJson(routeParams).getBlueprint();
    }
    async loadCollection(routeParams = {}, forceRefresh = true) {
        //get the bluepritn for the model
        let blueprint = this.getModelsBlueprint(routeParams);
        const route = blueprint.buildCollectionRoute();
        //find the subcollection in the cache, if found, return it
        if (!forceRefresh) {
            const cachedSubCollection = this.cachedSubCollections[route];
            if (cachedSubCollection) {
                return cachedSubCollection;
            }
        }
        //otherwise load the subcollection
        const models = await this.engine.loadCollection(blueprint);
        //and cache the subcollection
        this.cacheSubCollection(route, models);
        return models;
    }
}
exports.default = Repository;
//# sourceMappingURL=data:application/json;base64,