"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const firestore_1 = require("@firebase/firestore");
class ClientEngine {
    constructor(app) {
        this.transaction = null;
        this.batch = null;
        this.listeners = {};
        this.inTransaction = false;
        this.app = app;
        this.db = (0, firestore_1.getFirestore)(app);
    }
    save(model) {
        const blueprint = model.getBlueprint();
        return (new Promise((resolve, reject) => {
            try {
                // if model has id, then update firestore document otherwise add firestore document to collection
                if (model.id) {
                    if (this.transaction) {
                        this.transaction.set((0, firestore_1.doc)(this.db, blueprint.buildCollectionRoute(), model.id), model.toJson());
                        resolve(model);
                    }
                    else if (this.batch) {
                        this.batch.set((0, firestore_1.doc)(this.db, blueprint.buildCollectionRoute(), model.id), model.toJson());
                        resolve(model);
                    }
                    else {
                        (0, firestore_1.setDoc)((0, firestore_1.doc)(this.db, blueprint.buildCollectionRoute(), model.id)
                            .withConverter(this.getConverter(blueprint.constructorFunction)), model)
                            .then(() => {
                            resolve(model);
                        });
                    }
                }
                else {
                    if (this.transaction) {
                        const docRef = (0, firestore_1.doc)(this.db, blueprint.buildCollectionRoute());
                        model.id = docRef.id;
                        this.transaction.set(docRef, model.toJson());
                        resolve(model);
                    }
                    else if (this.batch) {
                        const docRef = (0, firestore_1.doc)(this.db, blueprint.buildCollectionRoute());
                        model.id = docRef.id;
                        this.batch.set(docRef, model.toJson());
                        resolve(model);
                    }
                    else {
                        let docRef = (0, firestore_1.doc)((0, firestore_1.collection)(this.db, blueprint.buildCollectionRoute()))
                            .withConverter(this.getConverter(blueprint.constructorFunction));
                        model.id = docRef.id;
                        (0, firestore_1.setDoc)(docRef, model).then(() => {
                            resolve(model);
                        });
                    }
                }
            }
            catch (e) {
                reject(e);
            }
        }));
    }
    saveMany(models) {
        return (new Promise((resolve, reject) => {
            try {
                const promises = models.map(model => this.save(model));
                Promise.all(promises).then(resolve);
            }
            catch (e) {
                reject(e);
            }
        }));
    }
    update(blueprint, id, data) {
        return (new Promise((resolve, reject) => {
            try {
                if (this.transaction) {
                    this.transaction.update((0, firestore_1.doc)(this.db, blueprint.buildCollectionRoute(), id), data);
                    resolve();
                }
                else if (this.batch) {
                    this.batch.update((0, firestore_1.doc)(this.db, blueprint.buildCollectionRoute(), id), data);
                    resolve();
                }
                else {
                    (0, firestore_1.updateDoc)((0, firestore_1.doc)(this.db, blueprint.buildCollectionRoute(), id)
                        .withConverter(this.getConverter(blueprint.constructorFunction)), data)
                        .then(() => {
                        resolve();
                    });
                }
            }
            catch (e) {
                reject(e);
            }
        }));
    }
    async updateMany(blueprint, ids, data) {
        return (new Promise((resolve, reject) => {
            try {
                const promises = ids.map(id => this.update(blueprint, id, data));
                Promise.all(promises).then(() => resolve());
            }
            catch (e) {
                reject(e);
            }
        }));
    }
    async load(blueprint, id) {
        if (this.batch) {
            throw new Error('Cannot load in batch');
        }
        const query = (0, firestore_1.doc)(this.db, blueprint.buildCollectionRoute(), id).withConverter(this.getConverter(blueprint.constructorFunction));
        if (this.transaction) {
            return (await this.transaction.get(query)).data();
        }
        else {
            return (await (0, firestore_1.getDoc)(query)).data();
        }
    }
    async loadMany(blueprint, ids) {
        if (this.batch || this.transaction) {
            throw new Error('Cannot loadMany in batch');
        }
        const docRefs = ids.map(id => (0, firestore_1.doc)(this.db, blueprint.buildCollectionRoute(), id).withConverter(this.getConverter(blueprint.constructorFunction)));
        const promises = [];
        docRefs.forEach(dRef => {
            if (this.transaction) {
                promises.push(this.transaction.get(dRef));
            }
            else {
                promises.push((0, firestore_1.getDoc)(dRef));
            }
        });
        return (await Promise.all(promises)).map(d => d.data());
    }
    async loadCollection(blueprint) {
        if (this.batch) {
            throw new Error('Cannot loadCollection in batch or transaction');
        }
        const query = (0, firestore_1.collection)(this.db, blueprint.buildCollectionRoute()).withConverter(this.getConverter(blueprint.constructorFunction));
        return (await (0, firestore_1.getDocs)(query)).docs.map(d => d.data());
    }
    //TODO other paramters, like limit, startAt, etc...
    async query(blueprint, queryParams) {
        if (this.batch) {
            throw new Error('Cannot query in batch or transaction');
        }
        const collectionRef = (0, firestore_1.collection)(this.db, blueprint.buildCollectionRoute()).withConverter(this.getConverter(blueprint.constructorFunction));
        const wheres = [];
        queryParams.forEach(param => {
            wheres.push((0, firestore_1.where)(param.field, param.op, param.value));
        });
        return (await (0, firestore_1.getDocs)((0, firestore_1.query)(collectionRef, ...wheres))).docs.map(d => d.data());
    }
    async queryAsGroup(blueprint, queryParams) {
        if (this.batch) {
            throw new Error('Cannot queryAsGroup in batch or transaction');
        }
        const collectionRef = (0, firestore_1.collectionGroup)(this.db, blueprint.getSubCollectionName()).withConverter(this.getConverter(blueprint.constructorFunction));
        const wheres = [];
        queryParams.forEach(param => {
            wheres.push((0, firestore_1.where)(param.field, param.op, param.value));
        });
        return (await (0, firestore_1.getDocs)((0, firestore_1.query)(collectionRef, ...wheres))).docs.map(d => d.data());
    }
    snapshotListener(name, blueprint, id, onRecieve, onError) {
        this.listeners[name] = (0, firestore_1.onSnapshot)((0, firestore_1.doc)(this.db, blueprint.buildCollectionRoute(), id).withConverter(this.getConverter(blueprint.constructorFunction)), (snapshot) => {
            onRecieve(snapshot.data());
        }, (error) => onError(error));
    }
    snapshotListenerMany(name, blueprint, queryParams, onRecieve, onError) {
        const collectionRef = (0, firestore_1.collection)(this.db, blueprint.buildCollectionRoute()).withConverter(this.getConverter(blueprint.constructorFunction));
        const wheres = [];
        queryParams.forEach(param => {
            wheres.push((0, firestore_1.where)(param.field, param.op, param.value));
        });
        this.listeners[name] = (0, firestore_1.onSnapshot)((0, firestore_1.query)(collectionRef, ...wheres), (snapshot) => {
            onRecieve(snapshot.docs.map(d => d.data()));
        }, (error) => onError(error));
    }
    unsubscribeListener(name) {
        if (this.listeners[name]) {
            this.listeners[name]();
            delete this.listeners[name];
        }
    }
    hasListener(name) {
        return this.listeners[name] !== undefined;
    }
    delete(blueprint, id) {
        return new Promise(async (resolve, reject) => {
            try {
                if (this.batch) {
                    await this.batch.delete((0, firestore_1.doc)(this.db, blueprint.buildCollectionRoute(), id));
                    resolve();
                }
                else if (this.transaction) {
                    await this.transaction.delete((0, firestore_1.doc)(this.db, blueprint.buildCollectionRoute(), id));
                }
                else {
                    await (0, firestore_1.deleteDoc)((0, firestore_1.doc)(this.db, blueprint.buildCollectionRoute(), id).withConverter(this.getConverter(blueprint.constructorFunction)));
                }
                resolve();
            }
            catch (e) {
                reject(e);
            }
        });
    }
    deleteMany(blueprint, ids) {
        return (new Promise((resolve, reject) => {
            try {
                const promises = ids.map(id => this.delete(blueprint, id));
                Promise.all(promises).then(() => resolve());
            }
            catch (e) {
                reject(e);
            }
        }));
    }
    convertToTimestamp(date) {
        return firestore_1.Timestamp.fromDate(date);
    }
    convertFromTimestamp(timestamp) {
        if (typeof timestamp.toDate === 'function') {
            return timestamp.toDate();
        }
        else {
            return new Date(timestamp.seconds * 1000);
        }
    }
    getConverter(constructor) {
        return {
            toFirestore(item) {
                return item.toJson();
            },
            fromFirestore(snapshot) {
                const data = snapshot.data();
                data.id = snapshot.id;
                return (new constructor()).fromJson(data);
            }
        };
    }
    async runTransaction(operations) {
        return (0, firestore_1.runTransaction)(this.db, async (transaction) => {
            this.transaction = transaction;
            // this.transaction.
            return await operations();
        }).then((result) => {
            this.transaction = null;
            return result;
        }).catch(e => {
            this.transaction = null;
            throw e;
        });
    }
    //TODO over 500 operations per transaction check
    async runBatch(operations) {
        this.batch = (0, firestore_1.writeBatch)(this.db);
        const result = await operations();
        return await this.batch.commit().then(() => {
            this.batch = null;
            return result;
        }).catch(e => {
            this.batch = null;
            throw e;
        });
    }
}
exports.default = ClientEngine;
//# sourceMappingURL=data:application/json;base64,