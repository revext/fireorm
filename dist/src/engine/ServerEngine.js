"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const firebase_admin_1 = __importDefault(require("firebase-admin"));
class ServerEngine {
    constructor(app) {
        this.transaction = null;
        this.batch = null;
        // listeners: { [key: string]: admin.firestore.Su } = {}
        this.inTransaction = false;
        this.app = app;
        this.db = app.firestore();
    }
    save(model) {
        const blueprint = model.getBlueprint();
        return (new Promise((resolve, reject) => {
            try {
                // if model has id, then update firestore document otherwise add firestore document to collection
                if (model.id) {
                    if (this.transaction) {
                        this.transaction.set(this.db.collection(blueprint.buildCollectionRoute()).doc(model.id), model.toJson());
                        resolve(model);
                    }
                    else if (this.batch) {
                        this.batch.set(this.db.collection(blueprint.buildCollectionRoute()).doc(model.id), model.toJson());
                        resolve(model);
                    }
                    else {
                        this.db.collection(blueprint.buildCollectionRoute())
                            .withConverter(this.getConverter(blueprint.constructorFunction))
                            .doc(model.id).set(model).then(() => {
                            resolve(model);
                        });
                    }
                }
                else {
                    if (this.transaction) {
                        const docRef = this.db.collection(blueprint.buildCollectionRoute()).doc();
                        model.id = docRef.id;
                        this.transaction.set(docRef, model.toJson());
                        resolve(model);
                    }
                    else if (this.batch) {
                        const docRef = this.db.collection(blueprint.buildCollectionRoute()).doc();
                        model.id = docRef.id;
                        this.batch.set(docRef, model.toJson());
                        resolve(model);
                    }
                    else {
                        let docRef = this.db.collection(blueprint.buildCollectionRoute())
                            .withConverter(this.getConverter(blueprint.constructorFunction)).doc();
                        model.id = docRef.id;
                        this.db.collection(blueprint.buildCollectionRoute()).doc(model.id).set(model).then(() => {
                            resolve(model);
                        });
                    }
                }
            }
            catch (e) {
                reject(e);
            }
        }));
    }
    saveMany(models) {
        return (new Promise((resolve, reject) => {
            try {
                const promises = models.map(model => this.save(model));
                Promise.all(promises).then(resolve);
            }
            catch (e) {
                reject(e);
            }
        }));
    }
    update(blueprint, id, data) {
        return (new Promise((resolve, reject) => {
            try {
                if (this.transaction) {
                    this.transaction.update(this.db.collection(blueprint.buildCollectionRoute()).doc(id), data);
                    resolve();
                }
                else if (this.batch) {
                    this.batch.update(this.db.collection(blueprint.buildCollectionRoute()).doc(id), data);
                    resolve();
                }
                else {
                    this.db.collection(blueprint.buildCollectionRoute())
                        .withConverter(this.getConverter(blueprint.constructorFunction))
                        .doc(id).update(data).then(() => {
                        resolve();
                    });
                }
            }
            catch (e) {
                reject(e);
            }
        }));
    }
    async updateMany(blueprint, ids, data) {
        return (new Promise((resolve, reject) => {
            try {
                const promises = ids.map(id => this.update(blueprint, id, data));
                Promise.all(promises).then(() => resolve());
            }
            catch (e) {
                reject(e);
            }
        }));
    }
    async load(blueprint, id) {
        if (this.batch) {
            throw new Error('Cannot load in batch');
        }
        const query = this.db.collection(blueprint.buildCollectionRoute()).doc(id)
            .withConverter(this.getConverter(blueprint.constructorFunction));
        if (this.transaction) {
            return (await this.transaction.get(query)).data();
        }
        else {
            return (await query.get()).data();
        }
    }
    async loadMany(blueprint, ids) {
        if (this.batch) {
            throw new Error('Cannot loadMany in batch');
        }
        const docRefs = ids.map(id => this.db.collection(blueprint.buildCollectionRoute())
            .withConverter(this.getConverter(blueprint.constructorFunction)).doc(id));
        if (this.transaction) {
            return (await this.transaction.getAll(...docRefs)).map(d => d.data());
        }
        else {
            return (await this.db.getAll(...docRefs)).map(d => d.data());
        }
    }
    async loadCollection(blueprint) {
        if (this.batch) {
            throw new Error('Cannot loadCollection in batch');
        }
        const query = this.db.collection(blueprint.buildCollectionRoute())
            .withConverter(this.getConverter(blueprint.constructorFunction));
        if (this.transaction) {
            return (await this.transaction.get(query)).docs.map(d => d.data());
        }
        else {
            return (await query.get()).docs.map(d => d.data());
        }
    }
    //TODO other paramters, like limit, startAt, etc...
    async query(blueprint, queryParams) {
        if (this.batch) {
            throw new Error('Cannot query in batch');
        }
        let query = this.db.collection(blueprint.buildCollectionRoute()).withConverter(this.getConverter(blueprint.constructorFunction));
        queryParams.forEach(param => {
            query = query.where(param.field, param.op, param.value);
        });
        if (this.transaction) {
            return (await this.transaction.get(query)).docs.map(d => d.data());
        }
        else {
            return (await query.get()).docs.map(d => d.data());
        }
    }
    async queryAsGroup(blueprint, queryParams) {
        if (this.batch) {
            throw new Error('Cannot queryAsGroup in batch');
        }
        let query = this.db.collectionGroup(blueprint.getSubCollectionName()).withConverter(this.getConverter(blueprint.constructorFunction));
        queryParams.forEach(param => {
            query = query.where(param.field, param.op, param.value);
        });
        if (this.transaction) {
            return (await this.transaction.get(query)).docs.map(d => d.data());
        }
        else {
            return (await query.get()).docs.map(d => d.data());
        }
    }
    snapshotListener(name, blueprint, id, onRecieve, onError = null) {
        throw new Error('Not implemented');
    }
    snapshotListenerMany(name, blueprint, queryParams, onRecieve, onError = null) {
        throw new Error('Not implemented');
    }
    unsubscribeListener(name) {
        throw new Error('Not implemented');
    }
    hasListener(name) {
        throw new Error('Not implemented');
    }
    delete(blueprint, id) {
        return (new Promise((resolve, reject) => {
            try {
                if (this.transaction) {
                    this.transaction.delete(this.db.collection(blueprint.buildCollectionRoute()).doc(id));
                    resolve();
                }
                else if (this.batch) {
                    this.batch.delete(this.db.collection(blueprint.buildCollectionRoute()).doc(id));
                    resolve();
                }
                else {
                    this.db.collection(blueprint.buildCollectionRoute())
                        .withConverter(this.getConverter(blueprint.constructorFunction))
                        .doc(id).delete().then(() => {
                        resolve();
                    });
                }
            }
            catch (e) {
                reject(e);
            }
        }));
    }
    deleteMany(blueprint, ids) {
        return (new Promise((resolve, reject) => {
            try {
                const promises = ids.map(id => this.delete(blueprint, id));
                Promise.all(promises).then(() => resolve());
            }
            catch (e) {
                reject(e);
            }
        }));
    }
    convertToTimestamp(date) {
        return firebase_admin_1.default.firestore.Timestamp.fromDate(date);
    }
    convertFromTimestamp(timestamp) {
        return timestamp.toDate();
    }
    getConverter(constructor) {
        return {
            toFirestore(item) {
                return item.toJson();
            },
            fromFirestore(snapshot) {
                const data = snapshot.data();
                data.id = snapshot.id;
                return (new constructor()).fromJson(data);
            }
        };
    }
    async runTransaction(operations) {
        return this.db.runTransaction(async (transaction) => {
            this.transaction = transaction;
            return await operations();
        }).then((result) => {
            this.transaction = null;
            return result;
        }).catch(e => {
            this.transaction = null;
            throw e;
        });
    }
    //TODO over 500 operations per transaction check
    async runBatch(operations) {
        this.batch = this.db.batch();
        const result = await operations();
        return await this.batch.commit().then(() => {
            this.batch = null;
            return result;
        }).catch(e => {
            this.batch = null;
            throw e;
        });
    }
}
exports.default = ServerEngine;
//# sourceMappingURL=data:application/json;base64,